# 1. Реализовать функцию, принимающую два числа (позиционные аргументы)
# и выполняющую их деление. Числа запрашивать у пользователя,
# предусмотреть обработку ситуации деления на ноль.

def division_func(p1, p2):
    try:
        return p1 / p2  # Вывод значения в случае, если оно
    except ZeroDivisionError:
        pass


# данные должны быть числовыми. Можно было добавить проверку на p2=0,
# но решил потестить проверку при return в функции
try:
    p1 = int(input('Введите 1е число != 0 - '))
    p2 = int(input('Введите 2е число != 0 - '))
except ValueError:
    print('Следует ввести число!')
    exit()

# вывод результата деления, либо сообщения, если была попытка деления на 0
print(division_func(p1, p2) or 'Деление на 0 недопустимо!')


##################################################################################################

# 2. Реализовать функцию, принимающую несколько параметров, описывающих
# данные пользователя: имя, фамилия, год рождения, город проживания, email, телефон.
# Функция должна принимать параметры как именованные аргументы.
# Реализовать вывод данных о пользователе одной строкой.

# # Вариант 1
def person(name, surname, date, city, email, phone):
    print(f"Вы ввели следующую информацию: \n"
          f"Имя: {name} \n"
          f"Фамилия: {surname} \n"
          f"Год рождения: {date} \n"
          f"Город проживания:  {city} \n"
          f"Email: {email} \n"
          f"Телефон: {phone}")


# ввод данных в строковом виде
n = input('Введите имя - ')
s = input('Введите фамилию - ')
d = input('Введите год рождения - ')
c = input('Введите город проживания - ')
e = input('Введите ваш e-mail - ')
p = input('Введите ваш телефон - ')

person(name=n, surname=s, date=d, city=c, email=e, phone=p)


# Вариант 2 через **kwargs
def person(**kwargs):
    print(f"Вы ввели следующую информацию: \n"
          f"Имя: {kwargs['name']} \n"
          f"Фамилия: {kwargs['surname']} \n"
          f"Год рождения: {kwargs['date']} \n"
          f"Город проживания:  {kwargs['city']} \n"
          f"Email: {kwargs['email']} \n"
          f"Телефон: {kwargs['phone']}")


# ввод данных в строковом виде
n = input('Введите имя - ')
s = input('Введите фамилию - ')
d = input('Введите год рождения - ')
c = input('Введите город проживания - ')
e = input('Введите ваш e-mail - ')
p = input('Введите ваш телефон - ')

kwargs = {'name': n, 'surname': s, 'date': d, 'city': c, 'email': e, 'phone': p}

person(**kwargs)


##################################################################################################

# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента,
# и возвращает сумму наибольших двух аргументов.

# вариант 1
def my_func(p1, p2, p3):
    p = 0
    p = p1 + p2 + p3
    print(f'Сумма наибольших 2х из введенных чисел - {p - min(p1, p2, p3)}')


# вариант 2
def my_func2(p1, p2, p3):
    p = []
    p.append(p1)
    p.append(p2)
    p.append(p3)
    p = sorted(p, reverse=True)
    print(f'Сумма наибольших 2х из введенных чисел - {sum(p[0:2])}')


# обработка ошибки ввода нечислового значения
try:
    p1 = int(input('Введите 1е число - '))
    p2 = int(input('Введите 1е число - '))
    p3 = int(input('Введите 1е число - '))
except ValueError:
    print('Следует ввести число!')
    exit()

my_func(p1, p2, p3)
my_func2(p1, p2, p3)


##################################################################################################

# 4. Программа принимает действительное положительное число x и целое отрицательное число y.
# Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать
# в виде функции my_func(x, y). При решении задания необходимо обойтись без
# встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень
# с помощью оператора **. Второй — более сложная реализация без оператора **, предусматривающая использование цикла.

# вариант 1
def degree_func(a, b):
    print(f'Число {a} в степени {b} составит - {round((a ** b), 5)}')


# вариант 2
def degree_func2(a, b):
    c = 1
    for i in range(abs(b)):
        c /= a
    print(f'Число {a} в степени {b} составит - {round((c), 5)}')


a, b = 0, 0

# проверка ввода a > 0, b < 0 и обработка ошибки ввода
# нечислового значения
try:
    while a <= 0:
        a = int(input('Введите число больше 0 - '))
    while b >= 0:
        b = int(input('Введите число меньше 0 - '))
except ValueError:
    print('Следует ввести число!')
    exit()

degree_func(a, b)
degree_func2(a, b)

##################################################################################################

# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом.
# При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить
# ввод чисел, разделенных пробелом и снова нажать Enter. Сумма вновь введенных
# чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится
# специальный символ, выполнение программы завершается. Если специальный символ введен
# после нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной
# ранее сумме и после этого завершить программу.

numbers = ''  # строка вводимвх значений
num = []  # числовые значения для вычисления промежуточной суммы
total = 0  # общая сумма


# функция рассчета суммы значений в веденной строке
def sum_num(num):
    s = 0
    for i in range(len(num)):
        num[i] = int(num[i])
        s += num[i]
    return s


e = 0

while e == 0 or e == 2:
    e = 0  # обнуляем переменную для продолжения цикла на случай ошибочного вводо текстового значения
    numbers = input('Введите строку чисел (exit для завершения) - ')
    num = numbers.split()
    for i in num:
        if i.isdigit() == True:  # если в строке указано нечисловое значение, то ввод строки заново
            if num[-1] == 'exit':  # если в строке введен exit, то завершаем работу
                num.remove(num[-1])
                e = 1
        else:  # условие на случай ошибочного вводо текстового значения
            print('Вы ввели нечисловое значение! введите строку заново!')
            e = 2
            break
    if e != 2:
        print(f'Сумма данных чисел = {sum_num(num)}')
        total += sum_num(num)
    continue

print(f'Общая сумма = {total}')


##################################################################################################

# 6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв
# и возвращающую его же, но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом.
# Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки,
# но каждое слово должно начинаться с заглавной буквы. Необходимо использовать
# написанную ранее функцию int_func().
# Проверка - nice авп ъghj jапро hjjпаро вапрghgh cool

# для одного слова
def int_func(txt):
    print(f'{txt.title()}')


txt = ''
while txt == '' or max(txt) > 'z' or min(txt) < 'a':
    txt = input('Введите слово латинскими символами: ')

int_func(txt)


# Вариант 1 по тестовому набору
# тестовый набор противоречит задаче. Есил необходимо, чтобы программа отработала с ним
# то просто убираем проверку символов
def int_func(txt):
    print(f'{txt.title()}')


txt = ''
while txt == '':  # or max(txt) > 'z' or min(txt) < 'a':
    txt = input('Введите слово латинскими символами: ')

int_func(txt)


# Вариант 3 по тестовому набору
# Если необходимо, чтобы в конечном результате выдавались слова состоящие только из латинских символов, то:
def int_func(txt):
    print(f'{txt.title()}')


txt = ''
txt2 = []
while txt == '':
    txt = input('Введите набор слов через пробел: ')

txt2, txt = txt.split(), txt2

# заносим слова из латинских символов в список
for i in range(len(txt2)):
    if max(txt2[i]) <= 'z' and min(txt2[i]) >= 'a':
        txt.append(txt2[i])

txt = str(txt)
int_func(txt)
