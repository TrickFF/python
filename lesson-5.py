# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv

p = argv


def zp(*args):
    try:
        print(f'Выработка работника в часах - {float(p[1])} руб.\n'
              f'Cтавка в час - {float(p[2])} руб.\n'
              f'Его премия в этом месяце - {float(p[3])} руб.\n'
              f'Итого зарплата: {float(p[1]) * float(p[2]) + float(p[3])} руб.')
    except ValueError:
        print('Введено не числовое значение!')


zp(p)

####################################################################################################

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

sp = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
print(sp)
print([y for x, y in zip(sp, sp[1:]) if y > x])

####################################################################################################

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

print([x for x in range(20, 240) if x % 20 == 0 or x % 21 == 0])

####################################################################################################

# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

sp = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print(sp)
print([x for x in sp if sp.count(x) == 1])

####################################################################################################

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

print(reduce(lambda x, y: x * y, range(100, 1001, 2)))

####################################################################################################

# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

from itertools import count, cycle

# выход из цикла, если ввод корректен
while True:
    try:
        t = int(input('Введите положительное число - '))
        if t <= 0:
            raise ValueError # поднимаем ошибку, если t <= 0
        break
    except ValueError:
        print('Следует ввести положительное число!') # обработка ошибки ввода нечислового значения

for el in count(t):
    if el > 10:
        break
    else:
        print(el)

ls = [1, '34', False, ['qwerty', 127], t]

с = 0
for el in cycle(ls):
    if с > 14:
        break
    print(el)
    с += 1

####################################################################################################

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом:
# for el in fact(n). Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n.
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(n):
    a = 1
    for i in range(1, n + 1):
        a *= i
        yield a


# выход из цикла, если ввод корректен
while True:
    try:
        n = int(input('Введите положительное число - '))
        if n <= 0:
            raise ValueError  # поднимаем ошибку, если n <= 0
        break
    except ValueError:
        print('Следует ввести положительное число!')  # обработка ошибки ввода нечислового значения

for el in fact(n):
    print(el)